// lib/providers/chat_provider.dart
import 'package:flutter/material.dart';
import '../models/message.dart';

class ChatProvider extends ChangeNotifier {
  List<Message> _messages = [];
  bool _isTyping = false;
  bool _isSpeechToTextEnabled = true;
  bool _isTextToSpeechEnabled = true;

  List<Message> get messages => _messages;
  bool get isTyping => _isTyping;
  bool get isSpeechToTextEnabled => _isSpeechToTextEnabled;
  bool get isTextToSpeechEnabled => _isTextToSpeechEnabled;

  void sendMessage(String text) {
    print("Envoi message ‚Äì API POST /chat/message");

    final userMessage = Message(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      text: text,
      isUser: true,
      timestamp: DateTime.now(),
    );

    _messages.add(userMessage);
    notifyListeners();

    _simulateAIResponse(text);
  }

  void _simulateAIResponse(String userText) {
    _isTyping = true;
    notifyListeners();

    print("IA est en train d'√©crire...");

    Future.delayed(Duration(seconds: 2), () {
      final aiResponse = _generateAIResponse(userText);
      final aiMessage = Message(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        text: aiResponse,
        isUser: false,
        timestamp: DateTime.now(),
      );

      _messages.add(aiMessage);
      _isTyping = false;
      notifyListeners();
    });
  }

  String _generateAIResponse(String userText) {
    // Simulation de r√©ponse m√©dicale basique
    if (userText.toLowerCase().contains('mal de t√™te') ||
        userText.toLowerCase().contains('migraine')) {
      return "Je comprends votre pr√©occupation concernant vos maux de t√™te. Voici quelques conseils g√©n√©raux :\n\n‚Ä¢ Assurez-vous de rester bien hydrat√©\n‚Ä¢ Essayez de vous reposer dans un endroit calme\n‚Ä¢ √âvitez les √©crans lumineux\n\nSi vos maux de t√™te persistent ou s'aggravent, je vous recommande vivement de consulter un professionnel de sant√©.\n\n‚ö†Ô∏è Ceci est un conseil g√©n√©ral et ne remplace pas une consultation m√©dicale.";
    } else if (userText.toLowerCase().contains('fi√®vre')) {
      return "La fi√®vre peut √™tre le signe de diverses conditions. Voici ce que vous pouvez faire :\n\n‚Ä¢ Surveillez votre temp√©rature r√©guli√®rement\n‚Ä¢ Restez hydrat√© avec beaucoup d'eau\n‚Ä¢ Reposez-vous autant que possible\n\nüö® Si votre fi√®vre d√©passe 39¬∞C ou persiste plus de 3 jours, consultez imm√©diatement un m√©decin.\n\n‚ö†Ô∏è En cas de difficult√©s respiratoires ou autres sympt√¥mes graves, rendez-vous aux urgences.";
    } else {
      return "Merci pour votre question. Je suis l√† pour vous aider avec vos pr√©occupations de sant√©. Pouvez-vous me donner plus de d√©tails sur vos sympt√¥mes ?\n\nJe peux vous fournir des informations g√©n√©rales, mais n'oubliez pas que cela ne remplace jamais l'avis d'un professionnel de sant√© qualifi√©.\n\nüí° Pour une r√©ponse plus pr√©cise, d√©crivez-moi :\n‚Ä¢ Vos sympt√¥mes actuels\n‚Ä¢ Depuis quand les ressentez-vous\n‚Ä¢ Leur intensit√©";
    }
  }

  void sendQuickReply(String quickReply) {
    print("Quick reply s√©lectionn√©e ‚Äì appel API Chatbot anticip√©");
    sendMessage(quickReply);
  }

  void toggleSpeechToText() {
    _isSpeechToTextEnabled = !_isSpeechToTextEnabled;
    print("STT toggl√©: ${_isSpeechToTextEnabled ? 'ON' : 'OFF'}");
    notifyListeners();
  }

  void toggleTextToSpeech() {
    _isTextToSpeechEnabled = !_isTextToSpeechEnabled;
    print("TTS toggl√©: ${_isTextToSpeechEnabled ? 'ON' : 'OFF'}");
    notifyListeners();
  }

  void startSpeechToText() {
    print("STT: D√©clenche reconnaissance vocale (Speech-to-Text)");
    // Simulation de reconnaissance vocale
  }

  void playTextToSpeech(String text) {
    print("TTS: Lecture r√©ponse (Text-to-Speech)");
    // Simulation de synth√®se vocale
  }

  void addToFavorites(String messageId) {
    print("Ajout aux favoris ‚Äì API POST /chat/favorite");
    notifyListeners();
  }

  void clearChat() {
    _messages.clear();
    notifyListeners();
  }
}