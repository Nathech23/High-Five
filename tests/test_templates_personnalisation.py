"""
Tests de Personnalisation et Templates
H√¥pital G√©n√©ral de Douala

Script de test pour valider le syst√®me de templates multilingues
et la personnalisation avec donn√©es patients r√©elles.
"""

import sys
import json
from datetime import datetime, timedelta
from typing import List, Dict, Any

# Import du gestionnaire de templates
from src.services.templates_manager import (
    TemplateManager, MessagePersonalizer, PatientData,
    MessageType, Language, create_sample_patient_data
)

class TemplateTestSuite:
    """Suite de tests pour le syst√®me de templates"""
    
    def __init__(self):
        self.template_manager = TemplateManager()
        self.personalizer = MessagePersonalizer(self.template_manager)
        self.test_results = []
    
    def run_all_tests(self) -> Dict[str, Any]:
        """Ex√©cute tous les tests de templates"""
        print("üß™ === TESTS DE TEMPLATES ET PERSONNALISATION ===")
        print("H√¥pital G√©n√©ral de Douala - Phase 3\n")
        
        # Tests individuels
        tests = [
            ("Test 1: Cr√©ation des 15 templates (5 types √ó 3 langues)", self.test_template_creation),
            ("Test 2: Variables de personnalisation dans templates", self.test_dynamic_variables),
            ("Test 3: S√©lection automatique de langue", self.test_language_detection),
            ("Test 4: Templates vocaux TwiML", self.test_twiml_templates),
            ("Test 5: Personnalisation avec donn√©es patients r√©elles", self.test_real_patient_data),
            ("Test 6: Coh√©rence des messages entre langues", self.test_language_consistency),
            ("Test 7: Gestion des erreurs et fallbacks", self.test_error_handling),
            ("Test 8: Performance et optimisation", self.test_performance)
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_name, test_function in tests:
            try:
                print(f"\nüìã {test_name}")
                print("-" * 60)
                result = test_function()
                if result:
                    print("‚úÖ R√âUSSI")
                    passed_tests += 1
                else:
                    print("‚ùå √âCHOU√â")
                self.test_results.append({"test": test_name, "passed": result})
            except Exception as e:
                print(f"‚ùå ERREUR: {e}")
                self.test_results.append({"test": test_name, "passed": False, "error": str(e)})
        
        # R√©sum√© final
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüéØ === R√âSUM√â DES TESTS ===")
        print(f"Tests r√©ussis: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
        
        if success_rate >= 90:
            print("üéâ EXCELLENT! Syst√®me de templates pr√™t pour la production")
        elif success_rate >= 75:
            print("‚úÖ BON! Quelques am√©liorations mineures n√©cessaires")
        else:
            print("‚ö†Ô∏è ATTENTION! Corrections importantes requises")
        
        return {
            "total_tests": total_tests,
            "passed_tests": passed_tests,
            "success_rate": success_rate,
            "results": self.test_results
        }
    
    def test_template_creation(self) -> bool:
        """Test 1: V√©rification des 15 templates (5 types √ó 3 langues)"""
        expected_templates = 0
        found_templates = 0
        
        print("V√©rification de l'existence des templates:")
        
        for message_type in MessageType:
            for language in Language:
                for format_type in ["sms", "voice", "twiml"]:
                    expected_templates += 1
                    try:
                        template = self.template_manager.get_template(
                            message_type, language, format_type
                        )
                        if template and len(template) > 10:  # Template non vide
                            found_templates += 1
                            print(f"  ‚úì {message_type.value}/{language.value}/{format_type}")
                        else:
                            print(f"  ‚úó {message_type.value}/{language.value}/{format_type} - Vide")
                    except Exception as e:
                        print(f"  ‚úó {message_type.value}/{language.value}/{format_type} - Erreur: {e}")
        
        print(f"\nTemplates trouv√©s: {found_templates}/{expected_templates}")
        return found_templates == expected_templates
    
    def test_dynamic_variables(self) -> bool:
        """Test 2: Test des variables de personnalisation"""
        print("Test des variables de personnalisation:")
        
        # Donn√©es de test avec toutes les variables de personnalisation
        test_patient = PatientData(
            name="Test Patient",
            phone="+237675934861",
            preferred_language="fr",
            doctor_name="Dr. Test",
            appointment_date=datetime(2025, 12, 25, 14, 30),
            appointment_time="14:30",
            medication_name="Parac√©tamol",
            dosage="500mg",
            department="Cardiologie",
            room_number="205"
        )
        
        success_count = 0
        total_tests = 0
        
        for message_type in MessageType:
            total_tests += 1
            try:
                message_data = self.personalizer.create_personalized_message(
                    message_type, test_patient, "sms"
                )
                message = message_data["message"]
                
                # V√©rifier qu'aucune variable n'est rest√©e non remplac√©e
                if "{" not in message and "}" not in message:
                    print(f"  ‚úì {message_type.value}: Variables correctement remplac√©es")
                    success_count += 1
                else:
                    print(f"  ‚úó {message_type.value}: Variables non remplac√©es trouv√©es")
                    print(f"    Message: {message[:100]}...")
            except Exception as e:
                print(f"  ‚úó {message_type.value}: Erreur - {e}")
        
        print(f"\nVariables de personnalisation: {success_count}/{total_tests} r√©ussies")
        return success_count == total_tests
    
    def test_language_detection(self) -> bool:
        """Test 3: Test de la s√©lection automatique de langue (logique simplifi√©e Cameroun)"""
        print("Test de d√©tection automatique de langue (logique simplifi√©e):")
        
        test_cases = [
            ("fr", "fr", "Patient avec preferred_language='fr' ‚Üí Fran√ßais"),
            ("en", "en", "Patient avec preferred_language='en' ‚Üí Anglais"),
            ("es", "es", "Patient avec preferred_language='es' ‚Üí Espagnol"),
            (None, "fr", "Patient SANS preferred_language ‚Üí Fran√ßais (fallback)"),
            ("zh", "fr", "Patient avec langue non support√©e 'zh' ‚Üí Fran√ßais (fallback)")
        ]
        
        success_count = 0
        
        for preferred_lang, expected_lang, description in test_cases:
            patient = PatientData(
                name="Test", 
                phone="+237675934861",  # Num√©ro camerounais (peu importe maintenant)
                preferred_language=preferred_lang
            )
            detected_lang = self.template_manager.language_detector.detect_language(patient)
            
            if detected_lang.value == expected_lang:
                print(f"  ‚úì {description}")
                success_count += 1
            else:
                print(f"  ‚úó {description} - D√©tect√©: {detected_lang.value}")
        
        print(f"\nD√©tection de langue: {success_count}/{len(test_cases)} r√©ussies")
        return success_count == len(test_cases)
    
    def test_twiml_templates(self) -> bool:
        """Test 4: Test des templates vocaux TwiML"""
        print("Test des templates vocaux TwiML:")
        
        test_patient = PatientData(
            name="Patient Test",
            phone="+237675934861",
            doctor_name="Dr. Test"
        )
        
        success_count = 0
        total_tests = 0
        
        for message_type in MessageType:
            for language in Language:
                total_tests += 1
                try:
                    message_data = self.personalizer.create_personalized_message(
                        message_type, test_patient, "twiml"
                    )
                    twiml = message_data["message"]
                    
                    # V√©rifications TwiML
                    checks = [
                        "<Response>" in twiml,
                        "<Say" in twiml,
                        "</Say>" in twiml,
                        "</Response>" in twiml,
                        "voice='alice'" in twiml,
                        "language=" in twiml
                    ]
                    
                    if all(checks):
                        print(f"  ‚úì {message_type.value}/{language.value}: TwiML valide")
                        success_count += 1
                    else:
                        print(f"  ‚úó {message_type.value}/{language.value}: TwiML invalide")
                        
                except Exception as e:
                    print(f"  ‚úó {message_type.value}/{language.value}: Erreur - {e}")
        
        print(f"\nTemplates TwiML: {success_count}/{total_tests} valides")
        return success_count >= (total_tests * 0.9)  # 90% de r√©ussite acceptable
    
    def test_real_patient_data(self) -> bool:
        """Test 5: Test avec donn√©es patients r√©elles"""
        print("Test avec donn√©es patients r√©elles:")
        
        # Donn√©es patients r√©alistes pour l'H√¥pital G√©n√©ral de Douala
        real_patients = [
            PatientData(
                name="Marie Ngono",
                phone="+237675123456",
                preferred_language="fr",
                doctor_name="Dr. Mballa",
                appointment_date=datetime.now() + timedelta(days=1),
                appointment_time="09:00",
                department="Gyn√©cologie",
                room_number="301"
            ),
            PatientData(
                name="Paul Biya Jr",
                phone="+237698765432",
                preferred_language="fr",
                doctor_name="Dr. Fouda",
                medication_name="Amoxicilline",
                dosage="250mg x3/jour",
                department="M√©decine G√©n√©rale"
            ),
            PatientData(
                name="Fatima Al-Rashid",
                phone="+966501234567",
                preferred_language="es",
                doctor_name="ÿØ. ÿßŸÑÿπŸÑŸä",
                appointment_date=datetime.now() + timedelta(days=3),
                appointment_time="15:30",
                department="ÿ∑ÿ® ÿßŸÑÿ£ÿ∑ŸÅÿßŸÑ"
            )
        ]
        
        success_count = 0
        total_messages = 0
        
        for patient in real_patients:
            print(f"\n  Patient: {patient.name} ({patient.phone})")
            
            # Test diff√©rents types de messages
            test_types = []
            if patient.appointment_date:
                test_types.append(MessageType.APPOINTMENT_REMINDER)
            if patient.medication_name:
                test_types.append(MessageType.MEDICATION_REMINDER)
            
            test_types.append(MessageType.HEALTH_TIP)  # Toujours applicable
            
            for msg_type in test_types:
                total_messages += 1
                try:
                    message_data = self.personalizer.create_personalized_message(
                        msg_type, patient, "sms"
                    )
                    
                    # V√©rifications
                    if (message_data["message"] and 
                        len(message_data["message"]) > 20 and
                        patient.name in message_data["message"]):
                        print(f"    ‚úì {msg_type.value}: Message g√©n√©r√©")
                        success_count += 1
                    else:
                        print(f"    ‚úó {msg_type.value}: Message invalide")
                        
                except Exception as e:
                    print(f"    ‚úó {msg_type.value}: Erreur - {e}")
        
        print(f"\nMessages patients r√©els: {success_count}/{total_messages} g√©n√©r√©s")
        return success_count >= (total_messages * 0.8)  # 80% de r√©ussite acceptable
    
    def test_language_consistency(self) -> bool:
        """Test 6: Test de coh√©rence entre langues"""
        print("Test de coh√©rence des messages entre langues:")
        
        validation = self.template_manager.validate_template_consistency()
        
        if validation["status"] == "valid":
            print("  ‚úì Tous les templates sont coh√©rents entre langues")
            return True
        else:
            print("  ‚úó Probl√®mes de coh√©rence d√©tect√©s:")
            for issue in validation["issues"][:5]:  # Afficher max 5 probl√®mes
                print(f"    - {issue}")
            return False
    
    def test_error_handling(self) -> bool:
        """Test 7: Test de gestion des erreurs"""
        print("Test de gestion des erreurs et fallbacks:")
        
        success_count = 0
        total_tests = 4
        
        # Test 1: Patient avec donn√©es manquantes
        try:
            incomplete_patient = PatientData(name="Test", phone="+237123456789")
            message_data = self.personalizer.create_personalized_message(
                MessageType.APPOINTMENT_REMINDER, incomplete_patient
            )
            if message_data["message"]:
                print("  ‚úì Gestion des donn√©es manquantes")
                success_count += 1
            else:
                print("  ‚úó √âchec avec donn√©es manquantes")
        except Exception as e:
            print(f"  ‚úó Erreur avec donn√©es manquantes: {e}")
        
        # Test 2: Langue non support√©e
        try:
            patient_unknown_lang = PatientData(
                name="Test", phone="+81123456789", preferred_language="ja"
            )
            message_data = self.personalizer.create_personalized_message(
                MessageType.HEALTH_TIP, patient_unknown_lang
            )
            if message_data["language"] == "fr":  # Fallback vers fran√ßais
                print("  ‚úì Fallback langue non support√©e")
                success_count += 1
            else:
                print("  ‚úó Fallback langue √©chou√©")
        except Exception as e:
            print(f"  ‚úó Erreur fallback langue: {e}")
        
        # Test 3: Num√©ro de t√©l√©phone invalide
        try:
            invalid_phone_patient = PatientData(name="Test", phone="invalid")
            message_data = self.personalizer.create_personalized_message(
                MessageType.HEALTH_TIP, invalid_phone_patient
            )
            if message_data["message"]:
                print("  ‚úì Gestion num√©ro invalide")
                success_count += 1
            else:
                print("  ‚úó √âchec num√©ro invalide")
        except Exception as e:
            print(f"  ‚úó Erreur num√©ro invalide: {e}")
        
        # Test 4: Template avec variables manquantes
        try:
            # Forcer un template avec variable inexistante
            patient = PatientData(name="Test", phone="+237123456789")
            template = "Bonjour {patient_name}, votre {nonexistent_variable} est pr√™t."
            variables = {"patient_name": patient.name}
            result = self.template_manager._render_template(template, variables)
            if "[Non sp√©cifi√©]" in result or "nonexistent_variable" not in result:
                print("  ‚úì Gestion variables manquantes")
                success_count += 1
            else:
                print("  ‚úó Variables manquantes non g√©r√©es")
        except Exception as e:
            print(f"  ‚úó Erreur variables manquantes: {e}")
        
        print(f"\nGestion d'erreurs: {success_count}/{total_tests} tests r√©ussis")
        return success_count >= 3  # Au moins 3/4 tests doivent passer
    
    def test_performance(self) -> bool:
        """Test 8: Test de performance"""
        print("Test de performance et optimisation:")
        
        import time
        
        # G√©n√©rer 100 messages pour tester la performance
        patients = []
        for i in range(100):
            patients.append(PatientData(
                name=f"Patient {i}",
                phone=f"+237675{i:06d}",
                doctor_name=f"Dr. Test {i%10}",
                appointment_date=datetime.now() + timedelta(days=i%7)
            ))
        
        start_time = time.time()
        
        try:
            messages = self.personalizer.batch_create_messages(
                patients, MessageType.APPOINTMENT_REMINDER
            )
            
            end_time = time.time()
            duration = end_time - start_time
            
            success_messages = len([m for m in messages if "error" not in m])
            
            print(f"  Messages g√©n√©r√©s: {success_messages}/100")
            print(f"  Temps d'ex√©cution: {duration:.2f} secondes")
            print(f"  Performance: {100/duration:.1f} messages/seconde")
            
            # Crit√®res de performance
            performance_ok = (
                success_messages >= 95 and  # 95% de succ√®s
                duration < 10 and           # Moins de 10 secondes
                100/duration >= 10          # Au moins 10 msg/sec
            )
            
            if performance_ok:
                print("  ‚úì Performance acceptable")
                return True
            else:
                print("  ‚úó Performance insuffisante")
                return False
                
        except Exception as e:
            print(f"  ‚úó Erreur de performance: {e}")
            return False

def main():
    """Fonction principale de test"""
    test_suite = TemplateTestSuite()
    results = test_suite.run_all_tests()
    
    # Sauvegarde des r√©sultats
    with open("test_templates_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìä R√©sultats sauvegard√©s dans: test_templates_results.json")
    
    # Code de sortie
    return 0 if results["success_rate"] >= 75 else 1

if __name__ == "__main__":
    sys.exit(main())